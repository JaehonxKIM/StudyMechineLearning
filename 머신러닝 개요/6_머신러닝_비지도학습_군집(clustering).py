# -*- coding: utf-8 -*-
"""6.머신러닝_비지도학습_군집(Clustering).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZypAuiGZGwOloDyrOHdZb8DBaPAUljYx

# 군집화 : CLUSTERING

- 목적
  - 데이터에 정답이 없다
  - **이 데이터가 무엇을 표방하는지 알 수 없다**
  - 이런 데이터를 알고리즘을 활용하여 무리(군집)를 만들어내어 새로운 특징점을 혹은 분류라는 지점을 생성하는 기법

- 목표 
  - 분류 알고리즘에 이 데이터를 적용하기 위해 카테고리화 한 컬럼을 제공 => 전처리과정

# K-Mean(거리기반)

- 가장 일반적으로 많이 사용
- 원리
  - 군집의 **중심점**이라는 임시값을 선택해서, 해당 중심점을 기준으로 가까운 거리에 있는 데이터(포인트)들을 선택하는 기법

## 그림 설명
1. 최초 알고리즘 생성시, 군집 중심점을 총 몇개 만들지 결정(제시, 기본값활용, 추천받을 수도 있다), 아래 그림에서는 2개로 설정
2. 중심점 설정
  - **랜덤**, 운이 나쁘면 오랜 시간이 걸릴 수도 있다
  - 데이터가 많이 **밀집한 위치**에 평균적으로 중심점을 잡으면, 상대적으로 빠르게 최종 중심점을 찾을 수 있다
3. 중심점에 가까운 데이터 포인트들은 해당 중심점에 멤버로 소속된다 -> 거리계산
4. 군집을 중심으로 모든 멤버들간의 **평균 지점으로 중심점을 이동**시킨다
5. 반복(3~4번 절차 반복)
6. **중심점이 몇번까지 이동할 것인지 제약, 더 이상 중심점이 변경되지 않으면 군집화 종료된다**
"""

from IPython.display import Image
Image('/content/drive/MyDrive/0406_res/k-mean_0.png')

"""- 장점
  - 매커니즘이 쉽다 -> 가장 많이 활용
  - 알고리즘도 심플
- 단점
  - 데이터가 많다면, 군집의 정확도가 떨어질 수 있다(평가를 통해 확인)
    - PCA등을 이용하여 압축처리가 필요
  - 3~4단계 지속적으로 발생되면 군집화 시간이 증가된다
  - 중심점을 몇개 잡을 지 애매하다
    - 후보군을 몇개 잡고 군집화 후 평가하여 결정
"""

# Commented out IPython magic to ensure Python compatibility.
# 필요한 라이브러리 가져오기
from sklearn.preprocessing import StandardScaler, scale
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# %matplotlib inline

# 데이터 준비
iris = load_iris()
iris_df = pd.DataFrame(iris.data, columns = iris.feature_names)
iris_df.head(1)

"""## 차원축소 사용(PCA)

## 군집평가

### 실루엣 분석

### 실루엣 계수를 이용한 평가

### 시각화

# Mean_Shift(밀도기반)

# GMM(확률기반)

# DBSCAN(밀도기반, 기하학적분포)
"""